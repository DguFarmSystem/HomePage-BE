name: 🌱Farm Website CI/CD pipeline🌱

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 📂 빌드 전에 환경변수를 로드하도록 설정
    - name: Create application.yml for build
      run: |
        mkdir -p ./src/main/resources
        echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml

    # Gradle 캐시 설정 (Gradle Wrapper 포함)
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-

    - name: Build with Gradle Wrapper (Skip Tests)
      run: ./gradlew build -x test

    # Docker 빌드 및 Docker Hub에 푸시
    - name: Docker build & push to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-test:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
        docker logout

    # EC2에 배포
    - name: Docker image pull & deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          set -e  # 에러 발생 시 즉시 스크립트 종료

          echo "🚀 최신 Docker 이미지 Pull 중..."
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test:latest

          echo "🛑 기존 컨테이너 중지 및 삭제"
          if [ "$(sudo docker inspect --format="{{.State.Running}}" docker-test 2>/dev/null)" = "true" ]; then
            sudo docker stop docker-test
            sudo docker rm docker-test
          fi

          echo "📂 yml 파일을 저장할 디렉토리 생성"
          sudo mkdir -p /home/ubuntu/app/src/main/resources
          sudo chown -R ubuntu:ubuntu /home/ubuntu/app  # ubuntu 사용자가 접근 가능하도록 변경
          sudo chmod -R 755 /home/ubuntu/app            # 디렉토리에 읽기, 쓰기, 실행 권한 부여

          echo "📄 yml 파일 생성 및 GitHub Secrets 값 적용"
          echo "${{ secrets.APPLICATION }}" | sudo tee /home/ubuntu/app/src/main/resources/application.yml > /dev/null
          sudo chmod 644 /home/ubuntu/app/src/main/resources/application.yml  # 모든 사용자 읽기 가능, 소유자만 쓰기 가능

          echo "🚀 새 컨테이너 실행 중..."
          sudo docker run -d --log-driver=syslog --name docker-test -p 8080:8080 \
            -v /home/ubuntu/app/src/main/resources:/app/src/main/resources \
            --restart always \
            ${{ secrets.DOCKER_USERNAME }}/docker-test:latest

          echo "✅ 실행 중인 컨테이너 확인"
          sudo docker ps -a | grep "docker-test"

          echo "🧹 사용하지 않는 Docker 이미지 정리"
          sudo docker system prune -af
